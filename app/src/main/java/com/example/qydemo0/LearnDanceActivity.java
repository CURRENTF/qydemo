package com.example.qydemo0;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.PixelFormat;
import android.hardware.Camera;
import android.media.MediaMetadataRetriever;
import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.SparseIntArray;
import android.view.Surface;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;

import com.aiunit.common.protocol.face.FaceResult;
import com.aiunit.common.protocol.face.FaceResultList;
import com.aiunit.vision.common.ConnectionCallback;
import com.aiunit.vision.face.FaceInputSlot;
import com.aiunit.vision.face.FaceOutputSlot;
import com.bumptech.glide.Glide;
import com.bumptech.glide.request.RequestOptions;
import com.coloros.ocs.ai.cv.CVUnit;
import com.coloros.ocs.ai.cv.CVUnitClient;
import com.coloros.ocs.base.common.ConnectionResult;
import com.coloros.ocs.base.common.api.OnConnectionFailedListener;
import com.coloros.ocs.base.common.api.OnConnectionSucceedListener;
import com.example.qydemo0.QYpack.AudioPlayer;
import com.example.qydemo0.QYpack.Constant;
import com.example.qydemo0.QYpack.DeviceInfo;
import com.example.qydemo0.QYpack.GenerateJson;
import com.example.qydemo0.QYpack.GlobalVariable;
import com.example.qydemo0.QYpack.KqwOneShot;
import com.example.qydemo0.QYpack.QYFile;
import com.example.qydemo0.QYpack.QYrequest;
import com.example.qydemo0.QYpack.SampleVideo;
import com.example.qydemo0.QYpack.SwitchVideoModel;
import com.example.qydemo0.QYpack.VideoClip;
import com.example.qydemo0.QYpack.WaveLoadDialog;
import com.example.qydemo0.Widget.MyAppCompatActivity;
import com.example.qydemo0.Widget.MyAsyncTask;
import com.example.qydemo0.utils.SoundTipUtil;
import com.koushikdutta.async.http.body.JSONObjectBody;
import com.shuyu.gsyvideoplayer.GSYVideoManager;
import com.shuyu.gsyvideoplayer.listener.GSYSampleCallBack;
import com.shuyu.gsyvideoplayer.listener.GSYVideoProgressListener;
import com.shuyu.gsyvideoplayer.utils.OrientationUtils;
import com.shuyu.gsyvideoplayer.video.base.GSYVideoPlayer;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import moe.codeest.enviews.ENDownloadView;
import moe.codeest.enviews.ENPlayView;

import static android.view.View.GONE;

/**
 * sampleVideo支持全屏与非全屏切换的清晰度，旋转，镜像等功能.
 * Activity可以继承GSYBaseActivityDetail实现详情模式的页面
 * 或者参考DetailPlayer、DetailListPlayer实现
 * <p>
 * Created by guoshuyu on 2017/6/18.
 */

public class LearnDanceActivity extends MyAppCompatActivity implements SurfaceHolder.Callback{

    private SurfaceView mSurfaceView;
    private SurfaceHolder mSurfaceHolder;
    //private Button btnStartStop;
    private boolean isRecording = false;//标记是否已经在录制
    private MediaRecorder mRecorder;//音视频录制类
    private Camera mCamera = null;//相机
    private Camera.Size mSize = null;//相机的尺寸
    private int mCameraFacing = Camera.CameraInfo.CAMERA_FACING_FRONT;//默认后置摄像头
    private static final SparseIntArray orientations = new SparseIntArray();//手机旋转对应的调整角度
    private int current_video_number = 0;
    private Boolean is_learn;
    private int all_num = 4;
    String path_cur;
    private Boolean is_record;
    private Boolean is_compare;
    private List<List<Long>> wrong_time = new ArrayList<>();
    private List<List<Boolean>> wrong_id = new ArrayList<>();
    private int all_learn_depose_video_num = 0;
    private int cur_compare_id = 0;
    //private ProgressDialog progressDialog;
    private WaveLoadDialog dialog;
    SeekBar cur_process;
    List<Integer> opt = new ArrayList();
    private int learning_id = -1;
    private int segment_id = -1;
    RelativeLayout menu_op;
    ImageView arrow;
    private int cur_rid = -1;

    private int is_normal;

    private List<Integer> expressions_sad = new ArrayList<>();

    private List<List<SwitchVideoModel>> all_learn_video = new ArrayList<>();

    static {
        orientations.append(Surface.ROTATION_0, 90);
        orientations.append(Surface.ROTATION_90, 0);
        orientations.append(Surface.ROTATION_180, 270);
        orientations.append(Surface.ROTATION_270, 180);
    }

    @BindView(R.id.detail_player)
    SampleVideo detailPlayer;

    @BindView(R.id.activity_detail_player)
    RelativeLayout activityDetailPlayer;

    private boolean isPlay;
    private boolean isPause;
    private boolean isRelease;

    private OrientationUtils orientationUtils;

    private MediaMetadataRetriever mCoverMedia;

    private ImageView btn1,btn2,btn3;

    private ImageView coverImageView, fullScreenView;
    ENPlayView startVideo;
    ENDownloadView downloadView;

    private TextView changeSpeed;

    private int bid;

    RelativeLayout.LayoutParams people_all = new RelativeLayout.LayoutParams(350, 910);
    private JSONArray urls_jsonarry = new JSONArray();

    private QYrequest learn_request = new QYrequest();
    private  QYFile learn_file = new QYFile();

    boolean mirror_status = false;

    private ImageView[] wrong_kuang = new ImageView[10], human_icons = new ImageView[6];

    private CVUnitClient mCVClient;
    private int startCode = -1;

    private TextView smile_word;

    private int cur_h = 480;

    private RelativeLayout.LayoutParams fill_tiny;

    private LinearLayout human_iconss;

    private ImageView black_back;

    RelativeLayout.LayoutParams fill_all_r = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
            ViewGroup.LayoutParams.MATCH_PARENT);
    RelativeLayout.LayoutParams fill_all;

    Handler handler;

    ImageView cover_start_icon;

    private KqwOneShot kqw;

    private boolean is_playing = true;
    private PoseHuman phl,phr;
//    private double[][][] rawPointsL = {{{0.45307443365695793, 0.025889967637540454}, {0.47896440129449835, 0.0}, {0.44660194174757284, 0.003236245954692557}, {0.540453074433657, 0.012944983818770227}, {-1, -1}, {0.5954692556634305, 0.14563106796116504}, {0.47249190938511326, 0.1650485436893204}, {0.6537216828478964, 0.3268608414239482}, {0.47896440129449835, 0.3656957928802589}, {0.6731391585760518, 0.488673139158576}, {0.3268608414239482, 0.3042071197411003}, {0.5825242718446602, 0.4854368932038835}, {0.47896440129449835, 0.5016181229773463}, {0.37216828478964403, 0.7216828478964401}, {0.4627831715210356, 0.7637540453074434}, {0.5307443365695793, 0.9805825242718447}, {0.5210355987055016, 1.0}}, {{0.46986301369863015, 0.12602739726027398}, {0.49178082191780825, 0.10684931506849316}, {0.4534246575342466, 0.10410958904109589}, {0.5328767123287671, 0.12328767123287672}, {0.4315068493150685, 0.1178082191780822}, {0.5493150684931507, 0.2273972602739726}, {0.40136986301369865, 0.2547945205479452}, {0.6095890410958904, 0.09589041095890412}, {0.3986301369863014, 0.38904109589041097}, {0.5575342465753425, 0.0}, {0.3904109589041096, 0.5342465753424658}, {0.5602739726027397, 0.49041095890410963}, {0.44794520547945205, 0.5068493150684932}, {0.5547945205479452, 0.7452054794520548}, {0.4780821917808219, 0.7506849315068493}, {0.5547945205479452, 0.8739726027397261}, {0.5219178082191781, 1.0}}, {{0.5266666666666666, 0.016666666666666666}, {-1, -1}, {0.5033333333333333, 0.0}, {-1, -1}, {0.45333333333333337, 0.03}, {0.5266666666666666, 0.16666666666666666}, {0.38, 0.17666666666666667}, {0.5366666666666666, 0.3466666666666666}, {0.32, 0.33666666666666667}, {0.6799999999999999, 0.36666666666666664}, {0.32, 0.5066666666666666}, {0.5333333333333333, 0.47}, {0.42, 0.48}, {0.55, 0.7366666666666666}, {0.57, 0.7266666666666666}, {0.49, 0.9999999999999999}, {0.42666666666666664, 0.94}}, {{0.5340136054421769, 0.023809523809523808}, {0.554421768707483, 0.0}, {0.5102040816326531, 0.01020408163265306}, {0.5952380952380952, 0.023809523809523808}, {0.48639455782312924, 0.034013605442176874}, {0.6632653061224489, 0.14285714285714285}, {0.47619047619047616, 0.18027210884353742}, {0.7210884353741497, 0.29591836734693877}, {0.36054421768707484, 0.336734693877551}, {0.7993197278911565, 0.30612244897959184}, {0.20068027210884354, 0.3469387755102041}, {0.6326530612244898, 0.47619047619047616}, {0.4965986394557823, 0.4727891156462585}, {0.7074829931972789, 0.7755102040816326}, {0.3877551020408163, 0.7482993197278911}, {0.7653061224489796, 1.0}, {0.2755102040816326, 0.9693877551020408}}, {{0.4982456140350877, 0.021052631578947368}, {0.519298245614035, 0.0}, {0.47368421052631576, 0.003508771929824561}, {0.5508771929824561, 0.014035087719298244}, {0.4421052631578947, 0.017543859649122806}, {0.5964912280701754, 0.14385964912280702}, {0.3929824561403509, 0.15789473684210525}, {0.6666666666666666, 0.31228070175438594}, {0.3333333333333333, 0.31228070175438594}, {0.8070175438596492, 0.3333333333333333}, {0.19298245614035087, 0.30877192982456136}, {0.5824561403508772, 0.4631578947368421}, {0.4421052631578947, 0.45964912280701753}, {0.6771929824561402, 0.7543859649122807}, {0.3543859649122807, 0.7403508771929824}, {0.7719298245614035, 1.0}, {0.2912280701754386, 1.0}}, {{0.46496815286624205, 0.11146496815286623}, {0.4840764331210191, 0.08917197452229299}, {0.4426751592356688, 0.09554140127388534}, {0.5159235668789809, 0.09235668789808917}, {0.4171974522292994, 0.11146496815286623}, {0.5668789808917198, 0.19108280254777069}, {0.4012738853503185, 0.23566878980891717}, {0.6847133757961783, 0.07961783439490445}, {0.356687898089172, 0.40127388535031844}, {0.6019108280254777, 0.0}, {0.29617834394904463, 0.5222929936305732}, {0.5477707006369428, 0.49999999999999994}, {0.42356687898089174, 0.49999999999999994}, {0.624203821656051, 0.7611464968152866}, {0.35350318471337583, 0.7611464968152866}, {0.7101910828025477, 0.9968152866242037}, {0.2898089171974523, 0.9999999999999999}}, {{0.46570397111913353, 0.03249097472924188}, {0.48736462093862815, 0.0036101083032490976}, {0.4404332129963899, 0.010830324909747292}, {0.5198555956678701, 0.0}, {0.4043321299638989, 0.018050541516245487}, {0.5812274368231047, 0.13357400722021662}, {0.371841155234657, 0.1407942238267148}, {0.6137184115523466, 0.2888086642599278}, {0.35379061371841153, 0.2888086642599278}, {0.6353790613718411, 0.4476534296028881}, {0.31768953068592054, 0.4584837545126354}, {0.5595667870036101, 0.4259927797833935}, {0.41877256317689526, 0.4296028880866426}, {0.6389891696750902, 0.7256317689530686}, {0.34657039711191334, 0.7364620938628159}, {0.7364620938628159, 1.0}, {0.2635379061371841, 0.9927797833935018}}, {{0.48653198653198654, 0.020202020202020204}, {0.5067340067340067, 0.0}, {0.4663299663299663, 0.0033670033670033673}, {0.537037037037037, 0.020202020202020204}, {0.44276094276094274, 0.02356902356902357}, {0.5942760942760943, 0.17171717171717174}, {0.3956228956228956, 0.17845117845117847}, {0.6144781144781144, 0.3265993265993266}, {0.3787878787878788, 0.35353535353535354}, {0.6313131313131313, 0.4713804713804714}, {0.3619528619528619, 0.5016835016835017}, {0.563973063973064, 0.4612794612794613}, {0.43265993265993263, 0.4612794612794613}, {0.6346801346801347, 0.7542087542087542}, {0.3619528619528619, 0.7575757575757576}, {0.7154882154882155, 1.0}, {0.2845117845117845, 0.9966329966329966}}, {{0.5233333333333333, 0.02}, {0.5466666666666666, 0.013333333333333332}, {0.5166666666666666, 0.0}, {0.56, 0.03666666666666667}, {0.47, 0.013333333333333332}, {0.5433333333333333, 0.16333333333333333}, {0.38333333333333336, 0.16666666666666666}, {0.5966666666666667, 0.31666666666666665}, {0.38, 0.3333333333333333}, {0.6499999999999999, 0.4666666666666666}, {0.36, 0.49}, {0.5700000000000001, 0.45666666666666667}, {0.44, 0.47333333333333333}, {0.62, 0.7066666666666667}, {0.38333333333333336, 0.7433333333333333}, {0.6966666666666667, 0.9733333333333333}, {0.30333333333333334, 0.9999999999999999}}, {{0.526595744680851, 0.02482269503546099}, {0.5336879432624113, 0.0035460992907801418}, {0.5088652482269503, 0.0}, {0.4698581560283688, 0.0035460992907801418}, {0.5833333333333333, 0.02127659574468085}, {0.5904255319148937, 0.16666666666666666}, {0.3953900709219858, 0.12056737588652482}, {0.6471631205673758, 0.326241134751773}, {0.37765957446808507, 0.28723404255319146}, {0.6968085106382979, 0.48936170212765956}, {0.3528368794326241, 0.4432624113475177}, {0.6046099290780141, 0.43262411347517726}, {0.4734042553191489, 0.4574468085106383}, {0.650709219858156, 0.702127659574468}, {0.3953900709219858, 0.7375886524822695}, {0.7109929078014184, 0.9858156028368794}, {0.28900709219858156, 0.9999999999999999}}, {{0.4525993883792049, 0.01834862385321101}, {0.4740061162079511, 0.0}, {0.4495412844036697, 0.0030581039755351682}, {0.5229357798165137, 0.024464831804281346}, {-1, -1}, {0.581039755351682, 0.15290519877675843}, {0.44342507645259943, 0.15902140672782875}, {0.7003058103975535, 0.2996941896024465}, {0.41590214067278286, 0.308868501529052}, {0.691131498470948, 0.46177370030581044}, {0.4036697247706422, 0.43730886850152906}, {0.5871559633027523, 0.46177370030581044}, {0.48012232415902145, 0.4740061162079511}, {0.6146788990825689, 0.7339449541284404}, {0.3853211009174312, 0.7400611620795108}, {0.6605504587155964, 1.0}, {0.2996941896024465, 0.9908256880733946}}, {{0.5202492211838006, 0.03115264797507788}, {0.5545171339563864, 0.028037383177570093}, {0.5264797507788161, 0.0}, {0.5981308411214953, 0.06542056074766356}, {-1, -1}, {0.5981308411214953, 0.17757009345794394}, {0.48598130841121495, 0.14330218068535827}, {0.6137071651090342, 0.31152647975077885}, {0.4517133956386293, 0.25856697819314645}, {0.48909657320872274, 0.33956386292834895}, {0.4205607476635514, 0.3208722741433022}, {0.5700934579439252, 0.48598130841121495}, {0.4984423676012461, 0.4766355140186916}, {0.35202492211838005, 0.6573208722741434}, {0.4984423676012461, 0.7570093457943926}, {0.5264797507788161, 0.853582554517134}, {0.64797507788162, 1.0}}, {{0.5800604229607251, 0.021148036253776436}, {0.6163141993957704, 0.021148036253776436}, {0.5861027190332326, 0.0}, {0.6586102719033233, 0.05438066465256798}, {-1, -1}, {0.5981873111782477, 0.14501510574018128}, {0.5619335347432024, 0.1268882175226586}, {0.4833836858006042, 0.23564954682779457}, {0.4894259818731118, 0.23867069486404835}, {0.3413897280966767, 0.28700906344410876}, {0.35347432024169184, 0.283987915407855}, {0.5830815709969789, 0.4652567975830816}, {0.6223564954682779, 0.4652567975830816}, {0.3957703927492447, 0.6797583081570997}, {0.5317220543806647, 0.7462235649546828}, {0.5377643504531722, 0.918429003021148}, {0.6555891238670695, 1.0}}, {{0.4970326409495549, 0.023738872403560828}, {0.532640949554896, 0.011869436201780414}, {0.49406528189910975, 0.0}, {0.5741839762611276, 0.03560830860534125}, {-1, -1}, {0.5474777448071216, 0.14540059347181009}, {0.4851632047477744, 0.142433234421365}, {0.6454005934718101, 0.28486646884273}, {0.5029673590504451, 0.30267062314540055}, {0.5059347181008902, 0.3382789317507418}, {0.4317507418397626, 0.3086053412462908}, {0.5118694362017804, 0.45400593471810086}, {0.4821958456973293, 0.45400593471810086}, {0.3545994065281899, 0.7181008902077151}, {0.46439169139465875, 0.744807121661721}, {0.4821958456973293, 0.9643916913946587}, {0.6127596439169138, 1.0}}, {{0.5116618075801749, 0.023323615160349854}, {0.5408163265306122, 0.0}, {0.5058309037900874, 0.0}, {0.5874635568513119, 0.014577259475218658}, {-1, -1}, {0.575801749271137, 0.119533527696793}, {0.5058309037900874, 0.119533527696793}, {0.5670553935860059, 0.27988338192419826}, {0.5116618075801749, 0.27988338192419826}, {0.42419825072886297, 0.2944606413994169}, {0.4037900874635568, 0.29737609329446063}, {0.5174927113702623, 0.4518950437317784}, {0.5087463556851312, 0.4548104956268222}, {0.4271137026239067, 0.7230320699708455}, {0.47959183673469385, 0.7230320699708455}, {0.5174927113702623, 1.0}, {0.5962099125364431, 0.9708454810495627}}, {{0.44883040935672514, 0.02046783625730994}, {0.47807017543859653, 0.0}, {0.44005847953216376, 0.0}, {0.5219298245614035, 0.02046783625730994}, {-1, -1}, {0.5219298245614035, 0.13157894736842105}, {0.4312865497076024, 0.11988304093567251}, {0.6359649122807018, 0.2631578947368421}, {-1, -1}, {0.5043859649122807, 0.2982456140350877}, {0.36403508771929827, 0.24853801169590642}, {0.4722222222222222, 0.4327485380116959}, {0.44005847953216376, 0.4415204678362573}, {0.4166666666666667, 0.7339181286549707}, {0.4517543859649123, 0.7280701754385964}, {0.5628654970760234, 1.0}, {0.5511695906432749, 0.9678362573099415}}, {{0.47058823529411764, 0.023529411764705882}, {0.5, 0.0}, {0.46176470588235297, 0.0}, {0.5470588235294118, 0.01764705882352941}, {-1, -1}, {0.5411764705882354, 0.13823529411764704}, {0.47647058823529415, 0.13823529411764704}, {0.6147058823529412, 0.28823529411764703}, {-1, -1}, {0.5235294117647059, 0.32941176470588235}, {0.38529411764705884, 0.2823529411764706}, {0.4852941176470588, 0.43235294117647055}, {0.43823529411764706, 0.44705882352941173}, {0.4470588235294118, 0.7264705882352941}, {0.4235294117647059, 0.7176470588235294}, {0.5235294117647059, 0.9999999999999999}, {0.5323529411764706, 0.9735294117647059}}, {{0.42320819112627983, 0.02389078498293515}, {0.45051194539249145, 0.0}, {0.4061433447098976, 0.010238907849829351}, {0.5017064846416381, 0.027303754266211604}, {0.39249146757679176, 0.05460750853242321}, {0.5802047781569966, 0.18771331058020477}, {0.38566552901023887, 0.19453924914675766}, {0.5767918088737201, 0.40955631399317405}, {0.378839590443686, 0.4061433447098976}, {0.5631399317406143, 0.5938566552901023}, {0.3890784982935153, 0.590443686006826}, {0.6109215017064846, 0.44368600682593856}, {0.4744027303754266, 0.447098976109215}, {0.5426621160409556, 0.7303754266211604}, {0.45051194539249145, 0.7098976109215017}, {0.6211604095563139, 0.9795221843003412}, {0.5358361774744027, 1.0}}, {{0.46904024767801855, 0.021671826625386997}, {0.4845201238390093, 0.0}, {0.4442724458204334, 0.006191950464396284}, {0.5092879256965944, 0.015479876160990712}, {0.4071207430340557, 0.02786377708978328}, {0.5712074303405572, 0.15170278637770898}, {0.3761609907120743, 0.17956656346749225}, {0.6455108359133126, 0.29411764705882354}, {0.3544891640866873, 0.3653250773993808}, {0.6021671826625387, 0.4148606811145511}, {0.42260061919504643, 0.28792569659442724}, {0.5557275541795665, 0.45820433436532504}, {0.42260061919504643, 0.45820433436532504}, {0.5526315789473684, 0.7523219814241486}, {0.4628482972136223, 0.7616099071207431}, {0.5371517027863777, 1.0}, {0.45975232198142413, 0.9876160990712074}}, {{0.4814241486068111, 0.02786377708978328}, {0.4969040247678018, 0.0}, {0.45665634674922595, 0.018575851393188854}, {0.5340557275541795, 0.009287925696594427}, {0.43188854489164086, 0.03715170278637771}, {0.5928792569659442, 0.16718266253869968}, {0.4040247678018576, 0.16408668730650156}, {0.6176470588235294, 0.3622291021671826}, {0.38235294117647056, 0.30340557275541796}, {0.5959752321981424, 0.2755417956656347}, {-1, -1}, {0.5928792569659442, 0.4613003095975232}, {0.45665634674922595, 0.47368421052631576}, {0.5897832817337461, 0.7461300309597523}, {0.5030959752321981, 0.7678018575851393}, {0.5526315789473684, 1.0}, {0.47523219814241485, 0.9969040247678018}}, {{0.44218749999999996, 0.03125}, {0.45781249999999996, 0.0}, {0.4203125, 0.01875}, {0.5078125, 0.0031249999999999997}, {-1, -1}, {0.5953124999999999, 0.140625}, {0.4046875, 0.15}, {0.5515625, 0.303125}, {0.4171875, 0.346875}, {0.4828125, 0.17812499999999998}, {0.4828125, 0.5125}, {0.5546875, 0.45625}, {0.42656249999999996, 0.44999999999999996}, {0.5515625, 0.7593749999999999}, {0.42343749999999997, 0.75}, {0.5296875, 1.0}, {0.4515625, 0.984375}}};
//    private double[][][] rawPointsR = {{{0.45307443365695793, 0.025889967637540454}, {0.47896440129449835, 0.0}, {0.44660194174757284, 0.003236245954692557}, {0.540453074433657, 0.012944983818770227}, {-1, -1}, {0.5954692556634305, 0.14563106796116504}, {0.47249190938511326, 0.1650485436893204}, {0.6537216828478964, 0.3268608414239482}, {0.47896440129449835, 0.3656957928802589}, {0.6731391585760518, 0.488673139158576}, {0.3268608414239482, 0.3042071197411003}, {0.5825242718446602, 0.4854368932038835}, {0.47896440129449835, 0.5016181229773463}, {0.37216828478964403, 0.7216828478964401}, {0.4627831715210356, 0.7637540453074434}, {0.5307443365695793, 0.9805825242718447}, {0.5210355987055016, 1.0}}, {{0.46986301369863015, 0.12602739726027398}, {0.49178082191780825, 0.10684931506849316}, {0.4534246575342466, 0.10410958904109589}, {0.5328767123287671, 0.12328767123287672}, {0.4315068493150685, 0.1178082191780822}, {0.5493150684931507, 0.2273972602739726}, {0.40136986301369865, 0.2547945205479452}, {0.6095890410958904, 0.09589041095890412}, {0.3986301369863014, 0.38904109589041097}, {0.5575342465753425, 0.0}, {0.3904109589041096, 0.5342465753424658}, {0.5602739726027397, 0.49041095890410963}, {0.44794520547945205, 0.5068493150684932}, {0.5547945205479452, 0.7452054794520548}, {0.4780821917808219, 0.7506849315068493}, {0.5547945205479452, 0.8739726027397261}, {0.5219178082191781, 1.0}}, {{0.5266666666666666, 0.016666666666666666}, {-1, -1}, {0.5033333333333333, 0.0}, {-1, -1}, {0.45333333333333337, 0.03}, {0.5266666666666666, 0.16666666666666666}, {0.38, 0.17666666666666667}, {0.5366666666666666, 0.3466666666666666}, {0.32, 0.33666666666666667}, {0.6799999999999999, 0.36666666666666664}, {0.32, 0.5066666666666666}, {0.5333333333333333, 0.47}, {0.42, 0.48}, {0.55, 0.7366666666666666}, {0.57, 0.7266666666666666}, {0.49, 0.9999999999999999}, {0.42666666666666664, 0.94}}, {{0.5340136054421769, 0.023809523809523808}, {0.554421768707483, 0.0}, {0.5102040816326531, 0.01020408163265306}, {0.5952380952380952, 0.023809523809523808}, {0.48639455782312924, 0.034013605442176874}, {0.6632653061224489, 0.14285714285714285}, {0.47619047619047616, 0.18027210884353742}, {0.7210884353741497, 0.29591836734693877}, {0.36054421768707484, 0.336734693877551}, {0.7993197278911565, 0.30612244897959184}, {0.20068027210884354, 0.3469387755102041}, {0.6326530612244898, 0.47619047619047616}, {0.4965986394557823, 0.4727891156462585}, {0.7074829931972789, 0.7755102040816326}, {0.3877551020408163, 0.7482993197278911}, {0.7653061224489796, 1.0}, {0.2755102040816326, 0.9693877551020408}}, {{0.4982456140350877, 0.021052631578947368}, {0.519298245614035, 0.0}, {0.47368421052631576, 0.003508771929824561}, {0.5508771929824561, 0.014035087719298244}, {0.4421052631578947, 0.017543859649122806}, {0.5964912280701754, 0.14385964912280702}, {0.3929824561403509, 0.15789473684210525}, {0.6666666666666666, 0.31228070175438594}, {0.3333333333333333, 0.31228070175438594}, {0.8070175438596492, 0.3333333333333333}, {0.19298245614035087, 0.30877192982456136}, {0.5824561403508772, 0.4631578947368421}, {0.4421052631578947, 0.45964912280701753}, {0.6771929824561402, 0.7543859649122807}, {0.3543859649122807, 0.7403508771929824}, {0.7719298245614035, 1.0}, {0.2912280701754386, 1.0}}, {{0.46496815286624205, 0.11146496815286623}, {0.4840764331210191, 0.08917197452229299}, {0.4426751592356688, 0.09554140127388534}, {0.5159235668789809, 0.09235668789808917}, {0.4171974522292994, 0.11146496815286623}, {0.5668789808917198, 0.19108280254777069}, {0.4012738853503185, 0.23566878980891717}, {0.6847133757961783, 0.07961783439490445}, {0.356687898089172, 0.40127388535031844}, {0.6019108280254777, 0.0}, {0.29617834394904463, 0.5222929936305732}, {0.5477707006369428, 0.49999999999999994}, {0.42356687898089174, 0.49999999999999994}, {0.624203821656051, 0.7611464968152866}, {0.35350318471337583, 0.7611464968152866}, {0.7101910828025477, 0.9968152866242037}, {0.2898089171974523, 0.9999999999999999}}, {{0.46570397111913353, 0.03249097472924188}, {0.48736462093862815, 0.0036101083032490976}, {0.4404332129963899, 0.010830324909747292}, {0.5198555956678701, 0.0}, {0.4043321299638989, 0.018050541516245487}, {0.5812274368231047, 0.13357400722021662}, {0.371841155234657, 0.1407942238267148}, {0.6137184115523466, 0.2888086642599278}, {0.35379061371841153, 0.2888086642599278}, {0.6353790613718411, 0.4476534296028881}, {0.31768953068592054, 0.4584837545126354}, {0.5595667870036101, 0.4259927797833935}, {0.41877256317689526, 0.4296028880866426}, {0.6389891696750902, 0.7256317689530686}, {0.34657039711191334, 0.7364620938628159}, {0.7364620938628159, 1.0}, {0.2635379061371841, 0.9927797833935018}}, {{0.48653198653198654, 0.020202020202020204}, {0.5067340067340067, 0.0}, {0.4663299663299663, 0.0033670033670033673}, {0.537037037037037, 0.020202020202020204}, {0.44276094276094274, 0.02356902356902357}, {0.5942760942760943, 0.17171717171717174}, {0.3956228956228956, 0.17845117845117847}, {0.6144781144781144, 0.3265993265993266}, {0.3787878787878788, 0.35353535353535354}, {0.6313131313131313, 0.4713804713804714}, {0.3619528619528619, 0.5016835016835017}, {0.563973063973064, 0.4612794612794613}, {0.43265993265993263, 0.4612794612794613}, {0.6346801346801347, 0.7542087542087542}, {0.3619528619528619, 0.7575757575757576}, {0.7154882154882155, 1.0}, {0.2845117845117845, 0.9966329966329966}}, {{0.5233333333333333, 0.02}, {0.5466666666666666, 0.013333333333333332}, {0.5166666666666666, 0.0}, {0.56, 0.03666666666666667}, {0.47, 0.013333333333333332}, {0.5433333333333333, 0.16333333333333333}, {0.38333333333333336, 0.16666666666666666}, {0.5966666666666667, 0.31666666666666665}, {0.38, 0.3333333333333333}, {0.6499999999999999, 0.4666666666666666}, {0.36, 0.49}, {0.5700000000000001, 0.45666666666666667}, {0.44, 0.47333333333333333}, {0.62, 0.7066666666666667}, {0.38333333333333336, 0.7433333333333333}, {0.6966666666666667, 0.9733333333333333}, {0.30333333333333334, 0.9999999999999999}}, {{0.526595744680851, 0.02482269503546099}, {0.5336879432624113, 0.0035460992907801418}, {0.5088652482269503, 0.0}, {0.4698581560283688, 0.0035460992907801418}, {0.5833333333333333, 0.02127659574468085}, {0.5904255319148937, 0.16666666666666666}, {0.3953900709219858, 0.12056737588652482}, {0.6471631205673758, 0.326241134751773}, {0.37765957446808507, 0.28723404255319146}, {0.6968085106382979, 0.48936170212765956}, {0.3528368794326241, 0.4432624113475177}, {0.6046099290780141, 0.43262411347517726}, {0.4734042553191489, 0.4574468085106383}, {0.650709219858156, 0.702127659574468}, {0.3953900709219858, 0.7375886524822695}, {0.7109929078014184, 0.9858156028368794}, {0.28900709219858156, 0.9999999999999999}}, {{0.4525993883792049, 0.01834862385321101}, {0.4740061162079511, 0.0}, {0.4495412844036697, 0.0030581039755351682}, {0.5229357798165137, 0.024464831804281346}, {-1, -1}, {0.581039755351682, 0.15290519877675843}, {0.44342507645259943, 0.15902140672782875}, {0.7003058103975535, 0.2996941896024465}, {0.41590214067278286, 0.308868501529052}, {0.691131498470948, 0.46177370030581044}, {0.4036697247706422, 0.43730886850152906}, {0.5871559633027523, 0.46177370030581044}, {0.48012232415902145, 0.4740061162079511}, {0.6146788990825689, 0.7339449541284404}, {0.3853211009174312, 0.7400611620795108}, {0.6605504587155964, 1.0}, {0.2996941896024465, 0.9908256880733946}}, {{0.5202492211838006, 0.03115264797507788}, {0.5545171339563864, 0.028037383177570093}, {0.5264797507788161, 0.0}, {0.5981308411214953, 0.06542056074766356}, {-1, -1}, {0.5981308411214953, 0.17757009345794394}, {0.48598130841121495, 0.14330218068535827}, {0.6137071651090342, 0.31152647975077885}, {0.4517133956386293, 0.25856697819314645}, {0.48909657320872274, 0.33956386292834895}, {0.4205607476635514, 0.3208722741433022}, {0.5700934579439252, 0.48598130841121495}, {0.4984423676012461, 0.4766355140186916}, {0.35202492211838005, 0.6573208722741434}, {0.4984423676012461, 0.7570093457943926}, {0.5264797507788161, 0.853582554517134}, {0.64797507788162, 1.0}}, {{0.5800604229607251, 0.021148036253776436}, {0.6163141993957704, 0.021148036253776436}, {0.5861027190332326, 0.0}, {0.6586102719033233, 0.05438066465256798}, {-1, -1}, {0.5981873111782477, 0.14501510574018128}, {0.5619335347432024, 0.1268882175226586}, {0.4833836858006042, 0.23564954682779457}, {0.4894259818731118, 0.23867069486404835}, {0.3413897280966767, 0.28700906344410876}, {0.35347432024169184, 0.283987915407855}, {0.5830815709969789, 0.4652567975830816}, {0.6223564954682779, 0.4652567975830816}, {0.3957703927492447, 0.6797583081570997}, {0.5317220543806647, 0.7462235649546828}, {0.5377643504531722, 0.918429003021148}, {0.6555891238670695, 1.0}}, {{0.4970326409495549, 0.023738872403560828}, {0.532640949554896, 0.011869436201780414}, {0.49406528189910975, 0.0}, {0.5741839762611276, 0.03560830860534125}, {-1, -1}, {0.5474777448071216, 0.14540059347181009}, {0.4851632047477744, 0.142433234421365}, {0.6454005934718101, 0.28486646884273}, {0.5029673590504451, 0.30267062314540055}, {0.5059347181008902, 0.3382789317507418}, {0.4317507418397626, 0.3086053412462908}, {0.5118694362017804, 0.45400593471810086}, {0.4821958456973293, 0.45400593471810086}, {0.3545994065281899, 0.7181008902077151}, {0.46439169139465875, 0.744807121661721}, {0.4821958456973293, 0.9643916913946587}, {0.6127596439169138, 1.0}}, {{0.5116618075801749, 0.023323615160349854}, {0.5408163265306122, 0.0}, {0.5058309037900874, 0.0}, {0.5874635568513119, 0.014577259475218658}, {-1, -1}, {0.575801749271137, 0.119533527696793}, {0.5058309037900874, 0.119533527696793}, {0.5670553935860059, 0.27988338192419826}, {0.5116618075801749, 0.27988338192419826}, {0.42419825072886297, 0.2944606413994169}, {0.4037900874635568, 0.29737609329446063}, {0.5174927113702623, 0.4518950437317784}, {0.5087463556851312, 0.4548104956268222}, {0.4271137026239067, 0.7230320699708455}, {0.47959183673469385, 0.7230320699708455}, {0.5174927113702623, 1.0}, {0.5962099125364431, 0.9708454810495627}}, {{0.44883040935672514, 0.02046783625730994}, {0.47807017543859653, 0.0}, {0.44005847953216376, 0.0}, {0.5219298245614035, 0.02046783625730994}, {-1, -1}, {0.5219298245614035, 0.13157894736842105}, {0.4312865497076024, 0.11988304093567251}, {0.6359649122807018, 0.2631578947368421}, {-1, -1}, {0.5043859649122807, 0.2982456140350877}, {0.36403508771929827, 0.24853801169590642}, {0.4722222222222222, 0.4327485380116959}, {0.44005847953216376, 0.4415204678362573}, {0.4166666666666667, 0.7339181286549707}, {0.4517543859649123, 0.7280701754385964}, {0.5628654970760234, 1.0}, {0.5511695906432749, 0.9678362573099415}}, {{0.47058823529411764, 0.023529411764705882}, {0.5, 0.0}, {0.46176470588235297, 0.0}, {0.5470588235294118, 0.01764705882352941}, {-1, -1}, {0.5411764705882354, 0.13823529411764704}, {0.47647058823529415, 0.13823529411764704}, {0.6147058823529412, 0.28823529411764703}, {-1, -1}, {0.5235294117647059, 0.32941176470588235}, {0.38529411764705884, 0.2823529411764706}, {0.4852941176470588, 0.43235294117647055}, {0.43823529411764706, 0.44705882352941173}, {0.4470588235294118, 0.7264705882352941}, {0.4235294117647059, 0.7176470588235294}, {0.5235294117647059, 0.9999999999999999}, {0.5323529411764706, 0.9735294117647059}}, {{0.42320819112627983, 0.02389078498293515}, {0.45051194539249145, 0.0}, {0.4061433447098976, 0.010238907849829351}, {0.5017064846416381, 0.027303754266211604}, {0.39249146757679176, 0.05460750853242321}, {0.5802047781569966, 0.18771331058020477}, {0.38566552901023887, 0.19453924914675766}, {0.5767918088737201, 0.40955631399317405}, {0.378839590443686, 0.4061433447098976}, {0.5631399317406143, 0.5938566552901023}, {0.3890784982935153, 0.590443686006826}, {0.6109215017064846, 0.44368600682593856}, {0.4744027303754266, 0.447098976109215}, {0.5426621160409556, 0.7303754266211604}, {0.45051194539249145, 0.7098976109215017}, {0.6211604095563139, 0.9795221843003412}, {0.5358361774744027, 1.0}}, {{0.46904024767801855, 0.021671826625386997}, {0.4845201238390093, 0.0}, {0.4442724458204334, 0.006191950464396284}, {0.5092879256965944, 0.015479876160990712}, {0.4071207430340557, 0.02786377708978328}, {0.5712074303405572, 0.15170278637770898}, {0.3761609907120743, 0.17956656346749225}, {0.6455108359133126, 0.29411764705882354}, {0.3544891640866873, 0.3653250773993808}, {0.6021671826625387, 0.4148606811145511}, {0.42260061919504643, 0.28792569659442724}, {0.5557275541795665, 0.45820433436532504}, {0.42260061919504643, 0.45820433436532504}, {0.5526315789473684, 0.7523219814241486}, {0.4628482972136223, 0.7616099071207431}, {0.5371517027863777, 1.0}, {0.45975232198142413, 0.9876160990712074}}, {{0.4814241486068111, 0.02786377708978328}, {0.4969040247678018, 0.0}, {0.45665634674922595, 0.018575851393188854}, {0.5340557275541795, 0.009287925696594427}, {0.43188854489164086, 0.03715170278637771}, {0.5928792569659442, 0.16718266253869968}, {0.4040247678018576, 0.16408668730650156}, {0.6176470588235294, 0.3622291021671826}, {0.38235294117647056, 0.30340557275541796}, {0.5959752321981424, 0.2755417956656347}, {-1, -1}, {0.5928792569659442, 0.4613003095975232}, {0.45665634674922595, 0.47368421052631576}, {0.5897832817337461, 0.7461300309597523}, {0.5030959752321981, 0.7678018575851393}, {0.5526315789473684, 1.0}, {0.47523219814241485, 0.9969040247678018}}, {{0.44218749999999996, 0.03125}, {0.45781249999999996, 0.0}, {0.4203125, 0.01875}, {0.5078125, 0.0031249999999999997}, {-1, -1}, {0.5953124999999999, 0.140625}, {0.4046875, 0.15}, {0.5515625, 0.303125}, {0.4171875, 0.346875}, {0.4828125, 0.17812499999999998}, {0.4828125, 0.5125}, {0.5546875, 0.45625}, {0.42656249999999996, 0.44999999999999996}, {0.5515625, 0.7593749999999999}, {0.42343749999999997, 0.75}, {0.5296875, 1.0}, {0.4515625, 0.984375}}};

    private List<List<List<Double> > > rawPointsL = new ArrayList<>(), rawPointsR = new ArrayList<>();

    private int[] wrong_kuang_resource = {R.id.head, R.id.body, R.id.left_hand, R.id.left_hand_2, R.id.right_hand,
            R.id.right_hand_2, R.id.left_leg, R.id.left_leg_2, R.id.right_leg, R.id.right_leg_2},
            human_icons_resource = {R.id.head, R.id.body, R.id.left_hands, R.id.right_hands, R.id.left_foots, R.id.right_foots};

    private WrongShow wrongShow;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setWindow();
        setContentView(R.layout.activity_learn_dance);
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);

        smile_word = (TextView) findViewById(R.id.smile_word);

        ArrayList<String> list = getIntent().getStringArrayListExtra("params");

        DisplayMetrics dm = getResources().getDisplayMetrics();
        int heightPixels = dm.heightPixels;
        fill_all = new RelativeLayout.LayoutParams((int) heightPixels*1280/720, heightPixels);

        fill_all.addRule(RelativeLayout.CENTER_HORIZONTAL);
        fill_tiny = new RelativeLayout.LayoutParams(1,1);

        //学习项目id
        learning_id = Integer.valueOf(list.get(0));
        //breakdown id
        bid = Integer.valueOf(list.get(1));
        //开始位置
        current_video_number = Integer.valueOf(list.get(2));
        //是否正常学习
        is_normal = Integer.valueOf(list.get(3));

        human_iconss = findViewById(R.id.human_icons);
        human_iconss.setVisibility(GONE);

        mCVClient = CVUnit.getFaceFerClient
                (this.getApplicationContext()).addOnConnectionSucceedListener(new OnConnectionSucceedListener() {
            @Override
            public void onConnectionSucceed() {
                Log.i("TAG", " authorize connect: onConnectionSucceed");
            }
        }).addOnConnectionFailedListener(new OnConnectionFailedListener() {
            @Override
            public void onConnectionFailed(ConnectionResult connectionResult) {
                Log.e("TAG", " authorize connect: onFailure: " + connectionResult.getErrorCode());
            }
        });

        mCVClient.initService(this, new ConnectionCallback() {
            @Override
            public void onServiceConnect() {
                Log.i("TAG", "initService: onServiceConnect");
                int startCode = mCVClient.start();
                if (startCode == 0) {

                } else {
                    Log.i("whc123", "init wrong!");
                }
            }

            @Override
            public void onServiceDisconnect() {
                Log.e("TAG", "initService: onServiceDisconnect: ");
            }
        });

        init_wrong_kuang();
        initViews();
        ButterKnife.bind(this);
        init_pose_view();
        findViewById(R.id.humanPose).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                btn_humanPose();
            }
        });
        init_kqw();

        wrongShow = new WrongShow(LearnDanceActivity.this);

        if(is_normal==0) {
            repeat_mode_init(list.get(4), list.get(5));
        } else if(is_normal==1){
            new InitAllLearn(LearnDanceActivity.this).execute(bid);
        }

    }

    private double[][][] List2Array(List<List<List<Double>>> a){
        double[][][] res = new double[a.size()][17][2];
        for(int i=0;i<a.size();i++){
            for(int j=0;j<17;j++){
                for(int k=0;k<2;k++){
                    res[i][j][k] = a.get(i).get(j).get(k);
                }
            }
        }
        return res;
    }

    private void init_kqw(){

        handler = new Handler() {
            @Override
            public void handleMessage(Message msg) {
                super.handleMessage(msg);
                Bundle bundle = msg.getData();
                String dataa = bundle.getString("msg");
                if(dataa.equals("【打开】镜子")) {
                    if(btn_mirrors(1) && !detailPlayer.getGSYVideoManager().isPlaying()) {
                        SoundTipUtil.soundTip(LearnDanceActivity.this, "好的");
                    }
                }
                else if(dataa.equals("【关闭】镜子")) {
                    if(btn_mirrors(0) && !detailPlayer.getGSYVideoManager().isPlaying()) {
                        SoundTipUtil.soundTip(LearnDanceActivity.this, "好的");
                    }
                }
                else if (dataa.equals("【开始】游戏")) {
                    btn_start();
                    if (!is_compare) {
                        if (!is_learn) {
                            SoundTipUtil.soundTip(LearnDanceActivity.this, "好的");
                        }
                        }
                }
                else if (dataa.equals("【下】一段") || dataa.equals("【返】回")){
                    btn_nOb();
                    if(!is_learn || is_compare){
                        SoundTipUtil.soundTip(LearnDanceActivity.this, "好的");
                    }
                }
                else if (dataa.equals("【镜像】翻转")) {
                    detailPlayer.MirrorRoa();
                    if(!detailPlayer.getGSYVideoManager().isPlaying()) {
                        SoundTipUtil.soundTip(LearnDanceActivity.this, "好的");
                    }
                }
            }
        };

        kqw = new KqwOneShot(this, handler);
        kqw.btn_grammar();
    }

    private void repeat_mode_init(String compare_video_url, String error_info){
    try{
        is_learn = true;
        is_compare = true;
        detailPlayer.setUp(compare_video_url, true, "对比视频");
        wrong_time.clear();
        JSONArray wrong_time_json = new JSONArray(error_info);
        wrong_id.clear();
        for(int i=0;i<wrong_time_json.length();i++){
            JSONObject wrong_time_json_item = wrong_time_json.getJSONObject(i);
            List<Long> wrong_time_item = new ArrayList<>();
            String str = wrong_time_json_item.getString("begin_time");
            Log.d("hjt.learn.dance.begin_t", str);
            wrong_time_item.add((long) (Double.parseDouble(str) * 1000.0));
            String str2 = wrong_time_json_item.getString("end_time");
            wrong_time_item.add((long) ((Double.parseDouble(str2) - Double.parseDouble(str))*1000.0));
            int cur_wrong_id_2 = wrong_time_json_item.getInt("error_type");
            List<Boolean> wrong_id_item = new ArrayList<>();
            String s = Integer.toBinaryString(cur_wrong_id_2);
            Integer s_int = Integer.valueOf(s);
            for(int j = 6; j >0 ; j--){
                wrong_id_item.add(s_int%10==1);
                s_int /= 10;
            }
            wrong_time.add(wrong_time_item);
            wrong_id.add(wrong_id_item);
            Log.d("hjt.in.it", "?" + i);
        }

        Log.e("wrong_time", String.valueOf(wrong_time));
        Log.e("wrong_id",String.valueOf(wrong_id));

        Log.d("hjt.out.it", "1");
        init_compare_video();
        detailPlayer.startPlayLogic();
        //hideProgressDialog();
        Log.d("hjt.out.it", "2");
      } catch (JSONException e) {
        Log.d("hjt.json.wwww", "wwww");
        e.printStackTrace();
      }
    }

    private void btn_humanPose(){
        if(is_compare){
            if(is_playing){
                is_playing=false;
                phl.setVisibility(GONE);
                phr.setVisibility(GONE);
            }
            else{
                if(detailPlayer.getCurrentPlayer().getGSYVideoManager().isPlaying()){
                    is_playing=true;
                    phl.postInvalidate();
                    phr.postInvalidate();
                    phl.setVisibility(View.VISIBLE);
                    phr.setVisibility(View.VISIBLE);}
                else {
                    Toast.makeText(LearnDanceActivity.this, "对比视频还没有播放哦~", Toast.LENGTH_SHORT).show();
                }
            }
        }
        else{
            Toast.makeText(LearnDanceActivity.this, "该功能只在动作对比时可用！", Toast.LENGTH_SHORT).show();
        }
    }

    private boolean btn_mirrors(int isi){
        if(!is_compare) {
            if (!mirror_status && isi == 1) {
//                        btn1.setText("恢复");
                mirror_status = true;
                mSurfaceView.setLayoutParams(fill_all);
                black_back.setLayoutParams(fill_all_r);
                return true;
            } else if(mirror_status && isi == 0){
//                        btn1.setText("镜子");
                mirror_status = false;
                mSurfaceView.setLayoutParams(fill_tiny);
                black_back.setLayoutParams(fill_tiny);
                return true;
            }
        }
        return false;
    }

    private void btn_start(){
        if (!is_compare) {
            if (!is_learn) {
                cover_start_icon.setVisibility(View.VISIBLE);
                is_learn = true;
                init_learn_view();
                detailPlayer.startPlayLogic();
            }
        }
    }

    private void btn_nOb(){
        try {
            if (!is_learn) {
                new PostRecord(this).execute(learning_id, urls_jsonarry.getJSONObject(current_video_number).getInt("id"),2);
            } else if (is_compare) {
                stop_compare_video();
                detailPlayer.setUp(all_learn_video.get(current_video_number), true, urls_jsonarry.getJSONObject(current_video_number).getString("name"));
                detailPlayer.startPlayLogic();
            }
        }catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private String getFer(Bitmap bitmap){
        String res = "";
        FaceInputSlot inputSlot = (FaceInputSlot) mCVClient.createInputSlot();
        inputSlot.setTargetBitmap(bitmap);
        FaceOutputSlot outputSlot = (FaceOutputSlot) mCVClient.createOutputSlot();
        mCVClient.process(inputSlot, outputSlot);
        FaceResultList faceList = outputSlot.getFaceList();
        List<FaceResult> faceResultList = new ArrayList<>();
        faceResultList = faceList.getFaceResultList();
        for (FaceResult faceResult: faceResultList) {
            res = faceResult.getExpression();
        }
        return res;
    }

    private void init_wrong_kuang(){
        for(int i=0;i<10;i++)
            wrong_kuang[i] = (ImageView) findViewById(wrong_kuang_resource[i]);
        for(int i=0;i<6;i++)
            human_icons[i] = (ImageView) findViewById(human_icons_resource[i]);
    }

    private void init_learn_pager(){
        try {
            new PostRecord(this).execute(learning_id, urls_jsonarry.getJSONObject(current_video_number).getInt("id"), 1);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        initLearnVideo();
        //Log.i("hash",learn_file.hashFileUrl("/storage/emulated/0/Android/data/com.example.qydemo0/cache/videos/1617625252036.mp4"));

        is_learn = false;

        is_record = false;

        is_compare = false;

        cur_process = (SeekBar) findViewById(R.id.progress);

        fullScreenView = (ImageView) findViewById(R.id.fullscreen);
        fullScreenView.setVisibility(GONE);

        startVideo = (ENPlayView) findViewById(R.id.start);

        downloadView = (ENDownloadView) findViewById(R.id.loading);

        changeSpeed = (TextView) findViewById(R.id.change_speed);

        try {
            detailPlayer.setUp(all_learn_video.get(current_video_number), true, urls_jsonarry.getJSONObject(current_video_number).getString("name"));
        } catch (JSONException e) {
            e.printStackTrace();
        }

        //增加封面
        coverImageView = new ImageView(this);
        coverImageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
        //coverImageView.setImageResource(R.mipmap.xxx1);
        detailPlayer.setThumbImageView(coverImageView);

        resolveNormalVideoUI();

        //外部辅助的旋转，帮助全屏
        orientationUtils = new OrientationUtils(this, detailPlayer);
        //初始化不打开外部的旋转
        orientationUtils.setEnable(false);

        detailPlayer.setIsTouchWiget(true);
        //detailPlayer.setIsTouchWigetFull(false);
        //关闭自动旋转
        detailPlayer.setRotateViewAuto(false);
        //打开  实现竖屏全屏动画
        detailPlayer.setShowFullAnimation(true);
        detailPlayer.setNeedLockFull(true);
        detailPlayer.setSeekRatio(1);
        //detailPlayer.setOpenPreView(false);
        detailPlayer.getFullscreenButton().setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //第一个true是否需要隐藏actionbar，第二个true是否需要隐藏statusbar
                detailPlayer.startWindowFullscreen(LearnDanceActivity.this, true, true);
            }
        });

        detailPlayer.setVideoAllCallBack(new GSYSampleCallBack() {

            @Override
            public void onPrepared(String url, Object... objects) {
                super.onPrepared(url, objects);
                isPlay = true;
                detailPlayer.onVideoPause();
                detailPlayer.getCurrentPlayer().getCurrentPlayer().setIsTouchWiget(true);
                detailPlayer.getCurrentPlayer().setIsTouchWigetFull(true);

                if(is_learn && !is_compare){
                    detailPlayer.getCurrentPlayer().setIsTouchWiget(false);
                    detailPlayer.getCurrentPlayer().setIsTouchWigetFull(false);
                    Toast.makeText(getBaseContext(),"你有10秒钟的时间到达录制位置",Toast.LENGTH_SHORT).show();
                    AudioPlayer audioPlayer = null;
                    try {
                        audioPlayer = new AudioPlayer(LearnDanceActivity.this, R.raw.count_number_10);
                        audioPlayer.getMediaPlayer().setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                            @Override
                            public void onCompletion(MediaPlayer mp) {
                                System.out.println("hereherherhreh");
                                startRecord();
                                detailPlayer.onVideoResume();
                            }
                        });
                        audioPlayer.getMediaPlayer().start();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    //new SleepNowThenPlay().execute();
                }
            }

            @Override
            public void onAutoComplete(String url, Object... objects) {
                super.onAutoComplete(url, objects);
                smile_word.setText("");
                for(int k=0;k<10;k++)
                    wrong_kuang[k].setBackgroundResource(R.color.dark_color);
                for(int k=0;k<6;k++)
                    human_icons[k].setColorFilter(Color.parseColor("#aaaaaa"));
                if(is_learn && !is_compare){
                    stopRecord();
                    if((new File(path_cur)).isFile()) {
                        Log.i("whc233","用户视频已保存");}
                        else{
                                Log.i("whc233","用户视频保存失败");
                        }
                    }
                }

            @Override
            public void onClickStartError(String url, Object... objects) {
                super.onClickStartError(url, objects);
            }

            @Override
            public void onClickResume(String url, Object... objects) {
                super.onClickResume(url, objects);
                Log.i("whc_lll", "here");
            }
        });

        people_all.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
        people_all.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        detailPlayer.setGSYVideoProgressListener(new GSYVideoProgressListener() {
            @Override
            public void onProgress(int progress, int secProgress, int currentPosition, int duration) {
                if(is_compare){
                    Log.d("hjt.in.play", "ok");
                    for(int k=0; k<expressions_sad.size(); k++){
                        if(currentPosition >= expressions_sad.get(k)*1000-500 && currentPosition <= expressions_sad.get(k)*1000+500){
                            smile_word.setText("请保持微笑呀！");
                            break;
                        }
                        else{
                            smile_word.setText("");
                        }
                    }

                    for(int i=0;i<wrong_time.size();i++) {
                        if (currentPosition > wrong_time.get(i).get(0)-500 && currentPosition < wrong_time.get(i).get(0) + wrong_time.get(i).get(1)){
                            if(detailPlayer.getSpeed()!=0.25f){
                                detailPlayer.getMspeed().setText("0.25倍速");
                                detailPlayer.getCurrentPlayer().setSpeedPlaying(0.25f, true);
                                Log.d("hjt.in.play", "change.it");

                                for(int k = 0; k < 2; k++){
                                    if(wrong_id.get(i).get(k)){
                                        wrong_kuang[k].setBackgroundResource(R.color.light_color);
                                        human_icons[k].setColorFilter(Color.parseColor("#FF5C5C"));
                                    }
                                    else{
                                        wrong_kuang[k].setBackgroundResource(R.color.dark_color);
                                        human_icons[k].setColorFilter(Color.parseColor("#aaaaaa"));
                                    }
                                }
                                for(int k = 2; k < 6; k++){
                                    if(wrong_id.get(i).get(k)){
                                        wrong_kuang[(k-2)*2+2].setBackgroundResource(R.color.light_color);
                                        wrong_kuang[(k-2)*2+1+2].setBackgroundResource(R.color.light_color);
                                        human_icons[k].setColorFilter(Color.parseColor("#FF5C5C"));
                                    }
                                    else{
                                        wrong_kuang[(k-2)*2+2].setBackgroundResource(R.color.dark_color);
                                        wrong_kuang[(k-2)*2+1+2].setBackgroundResource(R.color.dark_color);
                                        human_icons[k].setColorFilter(Color.parseColor("#aaaaaa"));
                                    }
                                }
                            }
                            break;
                        }
                        else{
                            for(int k=0;k<10;k++)
                                wrong_kuang[k].setBackgroundResource(R.color.dark_color);
                            if(detailPlayer.getSpeed()==0.25f){
                                detailPlayer.getMspeed().setText("1倍速");
                                detailPlayer.getCurrentPlayer().setSpeedPlaying(1f, true);
                            }
                        }
                    }
                }
            }
        });

        detailPlayer.getCurrentPlayer().startPlayLogic();

        black_back = (ImageView) findViewById(R.id.black_back);

        btn1 = (ImageView) findViewById(R.id.mirror_btn);
        btn2 = (ImageView) findViewById(R.id.next_video);
        btn3 = (ImageView) findViewById(R.id.learn_now);

        btn1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!btn_mirrors(0)){
                    btn_mirrors(1);
                }
            }
        });

        btn2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                btn_nOb();
            }
        });

        btn3.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                btn_start();
            }
        });

        menu_op = findViewById(R.id.expand_menu);
        arrow = findViewById(R.id.menu_btn);
        shrink_menu_now();
    }

    void shrink_menu_now(){
        arrow.setImageResource(R.drawable.ic_down_arrow2);
        menu_op.setTranslationY(-DeviceInfo.dip2px(LearnDanceActivity.this, 253));

        arrow.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                expand_menu_now();
            }
        });
    }

    void expand_menu_now(){
        arrow.setImageResource(R.drawable.ic_up_arrow2);
        menu_op.setTranslationY(-DeviceInfo.dip2px(this, 0));
//        btn1.setVisibility(View.VISIBLE);
//        btn2.setVisibility(View.VISIBLE);
//        btn3.setVisibility(View.VISIBLE);
        Animation animation = AnimationUtils.loadAnimation(this
                , R.anim.ani_down_translate_300ms);
        menu_op.startAnimation(animation);
        arrow.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                shrink_menu_now();
            }
        });
    }

    private void stop_compare_video(){
        btn2.setScaleX(1);
        is_compare = false;
        is_learn = false;
        for(int i=0;i<6;i++) human_icons[i].setVisibility(GONE);
        wrongShow.stop_show();
        human_iconss.setVisibility(GONE);
    }

    private void init_learn_view(){
        cur_process.setVisibility(GONE);
        changeSpeed.setVisibility(GONE);
        detailPlayer.setIs_double(false);
    }

    private void reset_learn_view(){
        cur_process.setVisibility(View.VISIBLE);
        changeSpeed.setVisibility(View.VISIBLE);
        detailPlayer.setIs_double(true);
    }

    private void go_to_next_segment(){
        try {
        new PostRecord(this).execute(learning_id, urls_jsonarry.getJSONObject(current_video_number).getInt("id"), 1);
        current_video_number++;
        if (current_video_number >= all_learn_depose_video_num) {
            Toast.makeText(LearnDanceActivity.this, "恭喜您！您已学会整支舞蹈", Toast.LENGTH_LONG);
            Intent intent = new Intent(LearnDanceActivity.this, MainActivity.class);
            startActivity(intent);
        }
            detailPlayer.setUp(all_learn_video.get(current_video_number), true, urls_jsonarry.getJSONObject(current_video_number).getString("name"));
            loadFirstFrameCover(all_learn_video.get(current_video_number).get(0).getUrl());
            detailPlayer.getCurrentPlayer().startPlayLogic();
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private void initLearnVideo() {
        try {
        for(int i=0;i<urls_jsonarry.length();i++){

            JSONObject urls_cur_item = urls_jsonarry.getJSONObject(i).getJSONObject("video").getJSONObject("url");

            SwitchVideoModel switchVideoModel;

            List<SwitchVideoModel> list = new ArrayList<>();

            if(urls_cur_item.has("1080P")){
                switchVideoModel = new SwitchVideoModel("1080P", urls_cur_item.getString("1080P"));
                list.add(switchVideoModel);
            }
            if(urls_cur_item.has("720P")){
                switchVideoModel = new SwitchVideoModel("720P", urls_cur_item.getString("720P"));
                list.add(switchVideoModel);
            }
            if(urls_cur_item.has("480P")){
                switchVideoModel = new SwitchVideoModel("480P", urls_cur_item.getString("480P"));
                list.add(switchVideoModel);
            }
            if(urls_cur_item.has("360P")){
                switchVideoModel = new SwitchVideoModel("360P", urls_cur_item.getString("360P"));
                list.add(switchVideoModel);
            }
            if(urls_cur_item.has("自动")){
                switchVideoModel = new SwitchVideoModel("自动", urls_cur_item.getString("自动"));
                list.add(switchVideoModel);
            }

            all_learn_video.add(list);

        }
        } catch (JSONException e) {
                e.printStackTrace();
            }
    }

    private void setWindow() {
        requestWindowFeature(Window.FEATURE_NO_TITLE);// 去掉标题栏
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);// 设置全屏
        // 设置竖屏显示
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        // 选择支持半透明模式,在有surfaceview的activity中使用。
        getWindow().setFormat(PixelFormat.TRANSLUCENT);
    }

    private void initViews() {
        mSurfaceView = (SurfaceView) findViewById(R.id.sf_view);
//        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
//        Display display = getWindowManager().getDefaultDisplay();
//        screenWidth = display.getWidth();
//        screenHeight = display.getHeight();

        SurfaceHolder holder = mSurfaceView.getHolder();// 取得holder
        holder.setFormat(PixelFormat.TRANSPARENT);
        holder.setKeepScreenOn(true);
        holder.addCallback(this); // holder加入回调接口

        cover_start_icon = findViewById(R.id.cover_start_icon);
        cover_start_icon.setVisibility(GONE);
        for(int i=0;i<6;i++) human_icons[i].setVisibility(GONE);
    }

    /**
     * 初始化相机
     */
    private void initCamera() {
        if (Camera.getNumberOfCameras() == 2) {
            mCamera = Camera.open(mCameraFacing);
        } else {
            mCamera = Camera.open();
        }

        LearnDanceActivity.CameraSizeComparator sizeComparator = new LearnDanceActivity.CameraSizeComparator();
        Camera.Parameters parameters = mCamera.getParameters();

        if (mSize == null) {
            List<Camera.Size> vSizeList = parameters.getSupportedPreviewSizes();
            Collections.sort(vSizeList, sizeComparator);

            for (int num = 0; num < vSizeList.size(); num++) {
                Camera.Size size = vSizeList.get(num);

                if (size.width >= 800 && size.height >= 480) {
                    this.mSize = size;
                    break;
                }
            }
            mSize = vSizeList.get(0);

            List<String> focusModesList = parameters.getSupportedFocusModes();

            //增加对聚焦模式的判断
            if (focusModesList.contains(Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO)) {
                parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO);
            } else if (focusModesList.contains(Camera.Parameters.FOCUS_MODE_AUTO)) {
                parameters.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);
            }
            mCamera.setParameters(parameters);
        }
        int rotation = getWindowManager().getDefaultDisplay().getRotation();
        int orientation = orientations.get(rotation);
        mCamera.setDisplayOrientation(orientation);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        isRelease = true;
        if (isPlay) {
            getCurPlay().release();
        }
        //GSYPreViewManager.instance().releaseMediaPlayer();
        if (orientationUtils != null)
            orientationUtils.releaseListener();
        if (mCoverMedia != null) {
            mCoverMedia.release();
            mCoverMedia = null;
        }
        if (mCVClient != null) {
            mCVClient.stop();
        }
        mCVClient.releaseService();
        mCVClient = null;
        kqw.btn_stop();
    }

    private GSYVideoPlayer getCurPlay() {
        if (detailPlayer.getFullWindowPlayer() != null) {
            return  detailPlayer.getFullWindowPlayer();
        }
        return detailPlayer;
    }


    private void resolveNormalVideoUI() {
        //增加title
        detailPlayer.getTitleTextView().setVisibility(GONE);
        detailPlayer.getBackButton().setVisibility(GONE);
    }


    /**
     * 这里只是演示，并不建议直接这么做
     * MediaMetadataRetriever最好做一个独立的管理器
     * 使用缓存
     * 注意资源的开销和异步等
     *
     * @param url
     */
    public void loadFirstFrameCover(String url) {
        //可以参考Glide，内部也是封装了MediaMetadataRetriever
        Glide.with(this.getApplicationContext())
                .setDefaultRequestOptions(
                        new RequestOptions()
                                .frame(1000000)
                                .centerCrop()
                                .error(R.drawable.logo)
                                .placeholder(R.drawable.logo))
                .load(url)
                .into(coverImageView);
    }

    /**
     * 开始录制
     */
    private void startRecord() {
        if (mRecorder == null) {
            mRecorder = new MediaRecorder(); // 创建MediaRecorder
        }
        if (mCamera != null) {
            mCamera.stopPreview();
            mCamera.unlock();
            mRecorder.setCamera(mCamera);
        }
        try {
            // 设置音频采集方式
            mRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
            //设置视频的采集方式
            mRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
            //设置文件的输出格式
            mRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);//aac_adif， aac_adts， output_format_rtp_avp， output_format_mpeg2ts ，webm
            //设置audio的编码格式
            mRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
            //设置video的编码格式
            mRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
            //设置录制的视频编码比特率
            mRecorder.setVideoEncodingBitRate(1000 * 1500);
            //设置录制的视频帧率,注意文档的说明:
            mRecorder.setVideoFrameRate(30);
            //设置要捕获的视频的宽度和高度
            int cur_w = (int) (((float)(cur_h))/480.0f*640.0f);
            mSurfaceHolder.setFixedSize(cur_w, cur_h);//最高只能设置640x480
            mRecorder.setVideoSize(cur_w, cur_h);//最高只能设置640x480
            //设置记录会话的最大持续时间（毫秒）
            mRecorder.setMaxDuration(60 * 1000);
            mRecorder.setPreviewDisplay(mSurfaceHolder.getSurface());
            path_cur = getExternalCacheDir().getPath();
            if (path_cur != null) {
                File dir = new File(path_cur + "/videos");
                if (!dir.exists()) {
                    dir.mkdir();
                }
                path_cur = dir + "/" + System.currentTimeMillis() + ".mp4";

                Log.i("path_cur",path_cur);

                //设置输出文件的路径
                mRecorder.setOutputFile(path_cur);
                //准备录制
                mRecorder.prepare();
                //开始录制
                mRecorder.start();
                isRecording = true;

                is_record = true;

                //btnStartStop.setText("停止");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 停止录制
     */
    private void stopRecord() {
        try {
            //停止录制
            mRecorder.stop();
            is_record = false;
            //重置
            mRecorder.reset();
            //showProgressDialog("提示","正在努力解析中，请稍等...");
            new SendUserDanceVideo(this).execute();
        } catch (Exception e) {
            e.printStackTrace();
        }
        isRecording = false;
        cover_start_icon.setVisibility(GONE);
    }

    private void init_compare_video(){
        is_compare = true;
        reset_learn_view();
        btn2.setScaleX(-1);
        for(int i=0;i<6;i++) human_icons[i].setVisibility(View.VISIBLE);
        if(mirror_status){
            mirror_status = false;
            mSurfaceView.setLayoutParams(fill_tiny);
            black_back.setLayoutParams(fill_tiny);
        }
        wrongShow.start_show();
        human_iconss.setVisibility(View.VISIBLE);
    }

    /**
     * 释放MediaRecorder
     */
    private void releaseMediaRecorder() {
        if (mRecorder != null) {
            mRecorder.release();
            mRecorder = null;
        }
    }

    /**
     * 释放相机资源
     */
    private void releaseCamera() {
        try {
            if (mCamera != null) {
                mCamera.stopPreview();
                mCamera.setPreviewCallback(null);
                mCamera.unlock();
                mCamera.release();
            }
        } catch (RuntimeException e) {
        } finally {
            mCamera = null;
        }
    }

    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
        // 将holder，这个holder为开始在onCreate里面取得的holder，将它赋给mSurfaceHolder
        mSurfaceHolder = holder;
        if (mCamera == null) {
            return;
        }
        try {
            //设置显示
            mCamera.setPreviewDisplay(holder);
            mCamera.startPreview();
        } catch (Exception e) {
            e.printStackTrace();
            releaseCamera();
            finish();
        }
    }

    @Override
    public void surfaceCreated(SurfaceHolder holder) {
        // 将holder，这个holder为开始在onCreate里面取得的holder，将它赋给mSurfaceHolder
        mSurfaceHolder = holder;
    }

    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
        // surfaceDestroyed的时候同时对象设置为null
        if (isRecording && mCamera != null) {
            mCamera.lock();
        }
        mSurfaceView = null;
        mSurfaceHolder = null;
        releaseMediaRecorder();
        releaseCamera();
    }

    class CameraSizeComparator implements Comparator<Camera.Size> {
        public int compare(Camera.Size lhs, Camera.Size rhs) {
            if (lhs.width == rhs.width) {
                return 0;
            } else if (lhs.width > rhs.width) {
                return 1;
            } else {
                return -1;
            }
        }
    }

    @Override
    protected void onResume() {
        getCurPlay().onVideoResume();
        super.onResume();
        initCamera();
        isPause = false;
    }

    @Override
    public void onPause() {
        getCurPlay().onVideoPause();
        releaseCamera();
        super.onPause();
        isPause = true;
    }

    @Override
    public void onBackPressed() {
        if (orientationUtils != null) {
            orientationUtils.backToProtVideo();
        }

        if (GSYVideoManager.backFromWindowFull(this)) {
            return;
        }
        super.onBackPressed();
    }

    public class SendUserDanceVideo extends MyAsyncTask<String, String, JSONObject[]> {

        protected SendUserDanceVideo(MyAppCompatActivity activity) {
            super(activity);
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            dialog = new WaveLoadDialog(LearnDanceActivity.this);
            dialog.start_progress();
        }

        @Override
        protected JSONObject[] doInBackground(String... video_path) {


            List<Bitmap> bitmaps = VideoClip.getFromTime(path_cur);
            for(int k=0;k<10;k++) {
                try {
                    Thread.sleep(500);
                    if(startCode==0) {
                        for (int i = 0; i < bitmaps.size(); i++) {
                            if (getFer(bitmaps.get(i)).equals("Sad")) {
                                expressions_sad.add(i);
                            }
                        }
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            Log.i("expression_res", String.valueOf(expressions_sad));

            try {String learn_dance_id = learn_file.uploadFileAllIn(Constant.mInstance.file_upload_verify_url, path_cur,
                    2,learn_file.hashFileUrl(path_cur));
            //Log.i("用户视频id", learn_dance_id);
            if(learn_dance_id == null) {
                Log.e("用户视频", "上传失败");
                return null;}
            String[] callToJson = {"record_id","int", ""+cur_rid,
                    "videoA","string", urls_jsonarry.getJSONObject(current_video_number).getJSONObject("video").getString("id"),
                    "videoB","string",learn_dance_id
            };
            Log.e("learn_json", GenerateJson.universeJson2(callToJson));
                JSONObject res_json = new JSONObject(learn_request.advancePost(GenerateJson.universeJson2(callToJson),
                        Constant.mInstance.task_url+"compare/","Authorization",GlobalVariable.mInstance.token));
                Log.i("whc_res_json", String.valueOf(res_json));
                String tid_pose = res_json.getJSONObject("data").getString("tid_pose"),
                        tid_merge = res_json.getJSONObject("data").getString("tid_merge");
                if(tid_pose==null||tid_merge==null) return null;
                for(int i=0;i<20;i++){
                    Thread.sleep(1000);
                    JSONObject task_res = new JSONObject(learn_request.advanceGet(Constant.mInstance.task_url+"schedule/"+tid_pose+"/",
                            "Authorization",GlobalVariable.mInstance.token));
                    JSONObject task_res_merge = new JSONObject(learn_request.advanceGet(Constant.mInstance.task_url+"schedule/"+tid_merge+"/",
                            "Authorization",GlobalVariable.mInstance.token));
                    Log.i("whc_task", String.valueOf(task_res));
                    Log.i("whc_merge", String.valueOf(task_res_merge));
                    int cur_schedule = task_res.getJSONObject("data").getJSONObject("task").getInt("prog");
                    if(task_res.getJSONObject("data").getJSONObject("task").getInt("is_finish")==1&&task_res_merge.getJSONObject("data").getJSONObject("task").getInt("is_finish")==1&& task_res_merge.getJSONObject("data").getJSONObject("data").getJSONObject("video_url").getJSONObject("url").has("自动")){
                        return new JSONObject[]{task_res.getJSONObject("data").getJSONObject("data"), task_res_merge.getJSONObject("data").getJSONObject("data")};
                    } else {
                        publishProgress(cur_schedule==100?"99":String.valueOf(cur_schedule), task_res.getJSONObject("data").getJSONObject("task").getString("step"));
                    }
                }
                return null;
            } catch (JSONException | InterruptedException e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(JSONObject[] resJson) {
            //hideProgressDialog();
            dialog.stop_progress();
            if(resJson != null){
                try {
                    Log.d("hjt.return.msg.player", resJson.toString());
                    File file1 = new File(path_cur);
                    file1.delete();
                    detailPlayer.setUp(resJson[1].getJSONObject("video_url").getJSONObject("url").getString("自动"), true, "对比视频");
                    wrong_time.clear();
                    JSONArray wrong_time_json = resJson[0].getJSONObject("evaluation").getJSONArray("error");
                    wrong_id.clear();
                    for(int i=0;i<wrong_time_json.length();i++){
                        JSONObject wrong_time_json_item = wrong_time_json.getJSONObject(i);
                        List<Long> wrong_time_item = new ArrayList<>();
                        String str = wrong_time_json_item.getString("begin_time");
                        Log.d("hjt.learn.dance.begin_t", str);
                        wrong_time_item.add((long) (Double.parseDouble(str) * 1000.0));
                        String str2 = wrong_time_json_item.getString("end_time");
                        wrong_time_item.add((long) ((Double.parseDouble(str2) - Double.parseDouble(str))*1000.0));
                        int cur_wrong_id_2 = wrong_time_json_item.getInt("error_type");
                        List<Boolean> wrong_id_item = new ArrayList<>();
                        String s = Integer.toBinaryString(cur_wrong_id_2);
                        Integer s_int = Integer.valueOf(s);
                        for(int j = 6; j >0 ; j--){
                            wrong_id_item.add(s_int%10==1);
                            s_int /= 10;
                        }
                        wrong_time.add(wrong_time_item);
                        wrong_id.add(wrong_id_item);
                        Log.d("hjt.in.it", "?" + i);
                    }

                    Log.e("wrong_time", String.valueOf(wrong_time));
                    Log.e("wrong_id",String.valueOf(wrong_id));

                    Log.d("hjt.out.it", "1");

                    rawPointsL.clear();
                    rawPointsR.clear();

                    JSONArray pose_model = resJson[0].getJSONArray("pose_model");
                    JSONArray pose_input = resJson[1].getJSONArray("pose_input");
                    for(int i=0;i<pose_model.length();i++){
                        JSONArray pm1 = pose_model.getJSONArray(i);
                        List<List<Double> > cur = new ArrayList<>();
                        for(int j=0;j<pm1.length();j++){
                            List<Double> curr = new ArrayList<>();
                            curr.add(pm1.getJSONArray(j).getDouble(0));
                            curr.add(pm1.getJSONArray(j).getDouble(1));
                            cur.add(curr);
                        }
                        rawPointsL.add(cur);
                    }

                    for(int i=0;i<pose_input.length();i++){
                        JSONArray pm1 = pose_input.getJSONArray(i);
                        List<List<Double> > cur = new ArrayList<>();
                        for(int j=0;j<pm1.length();j++){
                            List<Double> curr = new ArrayList<>();
                            curr.add(pm1.getJSONArray(j).getDouble(0));
                            curr.add(pm1.getJSONArray(j).getDouble(1));
                            cur.add(curr);
                        }
                        rawPointsR.add(cur);
                    }

                    new CompareDialog(LearnDanceActivity.this, resJson[0].getJSONObject("evaluation").getJSONArray("score").getJSONObject(0).getString("value"));
                    init_compare_video();
                    detailPlayer.startPlayLogic();
                    //hideProgressDialog();
                    Log.d("hjt.out.it", "2");
                } catch (JSONException e) {
                    Log.d("hjt.json.wwww", "wwww");
                    e.printStackTrace();
                }
            }
            else{
                Toast.makeText(LearnDanceActivity.this,"出错啦！",Toast.LENGTH_LONG);
                Intent intent = new Intent(LearnDanceActivity.this, MainActivity.class);
                startActivity(intent);
            }
        }

        @Override
        protected void onProgressUpdate(String... values) {
            super.onProgressUpdate(values);
            dialog.set_progress(Float.valueOf(values[0])/100f, values[1]);
        }


    }

    public class InitAllLearn extends MyAsyncTask<Integer, Void ,Boolean>{
        protected InitAllLearn(MyAppCompatActivity activity) {
            super(activity);
        }

        @Override
        protected void onPostExecute(Boolean aVoid) {
            super.onPostExecute(aVoid);
            if(aVoid)
                init_learn_pager();
            else
                Toast.makeText(LearnDanceActivity.this, "出错啦！", Toast.LENGTH_LONG).show();
        }

        @Override
        protected Boolean doInBackground(Integer... integers) {
            try {
                JSONObject res_json = new JSONObject(learn_request.advanceGet(Constant.mInstance.work_url+"segment/"+bid+"/","Authorization",
                        GlobalVariable.mInstance.token));
                Log.i("whc_res_json", String.valueOf(res_json));
                if(!res_json.has("msg") || !res_json.getString("msg").equals("Success")) return null;
                JSONArray res_data_json = res_json.getJSONArray("data");
                all_learn_depose_video_num = res_data_json.length();
                urls_jsonarry = res_data_json;
                return true;
            } catch (JSONException e) {
                e.printStackTrace();
            }

            return false;
        }

    }

    public class PostRecord extends MyAsyncTask<Integer, Void, Integer[]>{
        protected PostRecord(MyAppCompatActivity activity) {
            super(activity);
        }

        @Override
        protected void onPostExecute(Integer[] ints) {
            super.onPostExecute(ints);
            Log.i("ints[1]",""+ints[1]);
            Log.i("ints[0]", ""+ints[0]);
            if(ints[0]==0){
                Toast.makeText(LearnDanceActivity.this, "出错啦！", Toast.LENGTH_LONG).show();
                Intent intent = new Intent(LearnDanceActivity.this, MainActivity.class);
                startActivity(intent);
            }
            else{
                if(ints[1]==2){
                    Log.i("goto","gotogoto");
                    if(is_normal==1)
                        go_to_next_segment();
                }
            }
        }

        @Override
        protected Integer[] doInBackground(Integer... integers) {
            try {
            String[] rjs = {"learning", "int", ""+integers[0], "segment", "int", ""+integers[1], "status", "int", ""+integers[2]};
                JSONObject rjsr = new JSONObject(learn_request.advancePost(GenerateJson.universeJson2(rjs), Constant.mInstance.learn_url + "record/", "Authorization",
                        GlobalVariable.mInstance.token));
                Log.e("LearnDancePost", String.valueOf(rjsr));
                if(rjsr.getString("msg").equals("Success")){
                    Log.e("rjsr", String.valueOf(rjsr));
                    if(integers[2]==1){
                        cur_rid = rjsr.getJSONObject("data").getInt("rid");
                    }
                    Integer[] cur_input = {1,integers[2]};
                    return cur_input;
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
            Integer[] cur_input1 = {0};
            return cur_input1;
        }
    }

    private void init_pose_view(){
        phl = new PoseHuman(this, List2Array(rawPointsL));
        phr = new PoseHuman(this, List2Array(rawPointsR));
        RelativeLayout.LayoutParams phpl = new RelativeLayout.LayoutParams(800, 800);
        phpl.addRule(RelativeLayout.CENTER_VERTICAL);
        phpl.addRule(RelativeLayout.ALIGN_LEFT,R.id.centerTextView);
        RelativeLayout.LayoutParams phpr = new RelativeLayout.LayoutParams(800, 800);
        phpr.addRule(RelativeLayout.CENTER_VERTICAL);
        phpr.addRule(RelativeLayout.ALIGN_RIGHT,R.id.centerTextView);
        phl.setLayoutParams(phpl);
        phl.setBackgroundColor(Color.GRAY);
        phl.setAlpha(0.75f);
        activityDetailPlayer.addView(phl);
        phr.setLayoutParams(phpr);
        phr.setBackgroundColor(Color.GRAY);
        phr.setAlpha(0.75f);
        is_playing = false;
        phl.setVisibility(GONE);
        phr.setVisibility(GONE);
        activityDetailPlayer.addView(phr);
    }

    public class PoseHuman extends View {
        private static final int ALPHA = 255;
        private Paint mInnerPaintRed, mInnerPaintBlue, mInnerPaintPur,
                pointsPaintRed,pointsPaintBlue,pointsPaintPur;
        public int width;
        public int height;
        private double[][][] raw_points;
        private int[][] points = new int[17][2];
        private float total_time = 10f;

        public PoseHuman(Context context, double[][][] rawPoints) {
            super(context);
            raw_points = rawPoints;
            mInnerPaintRed = new Paint();
            mInnerPaintRed.setARGB(ALPHA, 255, 0, 0);
            mInnerPaintRed.setAntiAlias(true);
            mInnerPaintRed.setStrokeWidth(8f);

            mInnerPaintBlue = new Paint();
            mInnerPaintBlue.setARGB(ALPHA, 0, 0, 255);
            mInnerPaintBlue.setAntiAlias(true);
            mInnerPaintBlue.setStrokeWidth(8f);

            mInnerPaintPur = new Paint();
            mInnerPaintPur.setARGB(ALPHA, 255, 0, 255);
            mInnerPaintPur.setAntiAlias(true);
            mInnerPaintPur.setStrokeWidth(8f);

            pointsPaintRed = new Paint();
            pointsPaintRed.setARGB(ALPHA, 255, 0, 0);
            pointsPaintRed.setAntiAlias(true);
            pointsPaintRed.setStrokeWidth(10f);

            pointsPaintBlue = new Paint();
            pointsPaintBlue.setARGB(ALPHA, 0, 0, 255);
            pointsPaintBlue.setAntiAlias(true);
            pointsPaintBlue.setStrokeWidth(10f);

            pointsPaintPur = new Paint();
            pointsPaintPur.setARGB(ALPHA, 255, 0, 255);
            pointsPaintPur.setAntiAlias(true);
            pointsPaintPur.setStrokeWidth(10f);
            System.out.println("绘图初始化");
        }

        private double cur_time = 0.0f;
        private double get_cur_time(){
            //if(detailPlayer.getCurrentPlayer().getGSYVideoManager().isPlaying())
            //return (double)detailPlayer.getGSYVideoManager().getCurrentPosition()/(double)1000;
            //return -1;
            cur_time+=0.005f;
            return cur_time;
        }

        public void stop_now(){
            is_playing=false;
            phl.setVisibility(GONE);
            phr.setVisibility(GONE);
        }

        public void getPoints() {
            double now_time = get_cur_time();
            if(cur_time==-1) {
                stop_now();
            } else{
                if(now_time<=total_time) {
                    int ii = (int) (now_time / 0.5f);
                    double wei_a = ((ii + 1) * 0.5f - now_time) / 0.5f;
                    double wei_b = (now_time - ii * 0.5f) / 0.5f;
                    for (int i = 0; i < 17; i++) {
                        if(raw_points[ii][i][0]!=-1&&raw_points[ii+1][i][0]!=-1)
                            points[i][0] = (int) (wei_a * raw_points[ii][i][0]*500 + wei_b * raw_points[ii + 1][i][0]*500 + 150 + 0.5f);
                        else
                            points[i][0] = -1;
                        if(raw_points[ii][i][1]!=-1&&raw_points[ii+1][i][1]!=-1)
                            points[i][1] = (int) (wei_a * raw_points[ii][i][1]*500 + wei_b * raw_points[ii + 1][i][1]*500 + 150 + 0.5f);
                        else
                            points[i][1] = -1;
                    }
                }
                else{
                    is_playing = false;
                    phl.setVisibility(GONE);
                    phr.setVisibility(GONE);
                }
            }
        }

        @Override
        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
            width = getMeasuredWidth();
            height = getMeasuredHeight();
        }

        @Override
        protected void onDraw(Canvas canvas) {
            getPoints();
            if(is_playing) {
                if(points[0][0]!=-1)
                    canvas.drawCircle(points[0][0], points[0][1],15, pointsPaintPur);
                for(int i=1;i<17;i++){
                    if(points[i][0]!=-1)
                        canvas.drawCircle(points[i][0],points[i][1],15, i%2==1?pointsPaintRed:pointsPaintBlue);
                }
                if(points[0][0]!=-1&&points[0][1]!=-1&&points[1][0]!=-1&&points[1][1]!=-1)canvas.drawLine(points[0][0], points[0][1], points[1][0], points[1][1], mInnerPaintRed);
                if(points[0][0]!=-1&&points[0][1]!=-1&&points[2][0]!=-1&&points[2][1]!=-1)canvas.drawLine(points[0][0], points[0][1], points[2][0], points[2][1], mInnerPaintBlue);
                if(points[0][0]!=-1&&points[0][1]!=-1&&points[5][0]!=-1&&points[5][1]!=-1)canvas.drawLine(points[0][0], points[0][1], points[5][0], points[5][1], mInnerPaintRed);
                if(points[0][0]!=-1&&points[0][1]!=-1&&points[6][0]!=-1&&points[6][1]!=-1)canvas.drawLine(points[0][0], points[0][1], points[6][0], points[6][1], mInnerPaintBlue);
                if(points[1][0]!=-1&&points[1][1]!=-1&&points[3][0]!=-1&&points[3][1]!=-1)canvas.drawLine(points[1][0], points[1][1], points[3][0], points[3][1], mInnerPaintRed);
                if(points[2][0]!=-1&&points[2][1]!=-1&&points[4][0]!=-1&&points[4][1]!=-1)canvas.drawLine(points[2][0], points[2][1], points[4][0], points[4][1], mInnerPaintBlue);
                if(points[5][0]!=-1&&points[5][1]!=-1&&points[6][0]!=-1&&points[6][1]!=-1)canvas.drawLine(points[5][0], points[5][1], points[6][0], points[6][1], mInnerPaintPur);
                if(points[5][0]!=-1&&points[5][1]!=-1&&points[7][0]!=-1&&points[7][1]!=-1)canvas.drawLine(points[5][0], points[5][1], points[7][0], points[7][1], mInnerPaintRed);
                if(points[5][0]!=-1&&points[5][1]!=-1&&points[11][0]!=-1&&points[11][1]!=-1)canvas.drawLine(points[5][0], points[5][1], points[11][0], points[11][1], mInnerPaintRed);
                if(points[6][0]!=-1&&points[6][1]!=-1&&points[8][0]!=-1&&points[8][1]!=-1)canvas.drawLine(points[6][0], points[6][1], points[8][0], points[8][1], mInnerPaintBlue);
                if(points[6][0]!=-1&&points[6][1]!=-1&&points[12][0]!=-1&&points[12][1]!=-1)canvas.drawLine(points[6][0], points[6][1], points[12][0], points[12][1], mInnerPaintBlue);
                if(points[7][0]!=-1&&points[7][1]!=-1&&points[9][0]!=-1&&points[9][1]!=-1)canvas.drawLine(points[7][0], points[7][1], points[9][0], points[9][1], mInnerPaintRed);
                if(points[8][0]!=-1&&points[8][1]!=-1&&points[10][0]!=-1&&points[10][1]!=-1)canvas.drawLine(points[8][0], points[8][1], points[10][0], points[10][1], mInnerPaintBlue);
                if(points[11][0]!=-1&&points[11][1]!=-1&&points[12][0]!=-1&&points[12][1]!=-1)canvas.drawLine(points[11][0], points[11][1], points[12][0], points[12][1], mInnerPaintPur);
                if(points[11][0]!=-1&&points[11][1]!=-1&&points[13][0]!=-1&&points[13][1]!=-1)canvas.drawLine(points[11][0], points[11][1], points[13][0], points[13][1], mInnerPaintRed);
                if(points[12][0]!=-1&&points[12][1]!=-1&&points[14][0]!=-1&&points[14][1]!=-1)canvas.drawLine(points[12][0], points[12][1], points[14][0], points[14][1], mInnerPaintBlue);
                if(points[13][0]!=-1&&points[13][1]!=-1&&points[15][0]!=-1&&points[15][1]!=-1)canvas.drawLine(points[13][0], points[13][1], points[15][0], points[15][1], mInnerPaintRed);
                if(points[14][0]!=-1&&points[14][1]!=-1&&points[16][0]!=-1&&points[16][1]!=-1)canvas.drawLine(points[14][0], points[14][1], points[16][0], points[16][1], mInnerPaintBlue);
                changePos();
            }
        }

        //改变位置
        protected void changePos() {
            //重新绘制,触发 onDraw()
            getPoints();
            postInvalidate();
        }

    }

    private void show_wrong(){
        long currentPosition = detailPlayer.getGSYVideoManager().getCurrentPosition();
        if (is_compare) {
                Log.d("hjt.in.play", "ok");
                for (int k = 0; k < expressions_sad.size(); k++) {
                    if (currentPosition >= expressions_sad.get(k) * 1000 - 500 && currentPosition <= expressions_sad.get(k) * 1000 + 500) {
                        smile_word.setText("请保持微笑呀！");
                        break;
                    } else {
                        smile_word.setText("");
                    }
                }

                for (int i = 0; i < wrong_time.size(); i++) {
                    if (currentPosition > wrong_time.get(i).get(0) - 500 && currentPosition < wrong_time.get(i).get(0) + wrong_time.get(i).get(1)) {
                        if (detailPlayer.getSpeed() != 0.25f) {
                            detailPlayer.getMspeed().setText("0.25倍速");
                            detailPlayer.getCurrentPlayer().setSpeedPlaying(0.25f, true);
                            Log.d("hjt.in.play", "change.it");

                            for (int k = 0; k < 2; k++) {
                                if (wrong_id.get(i).get(k)) {
                                    wrong_kuang[k].setBackgroundResource(R.color.light_color);
                                    human_icons[k].setColorFilter(Color.parseColor("#FF5C5C"));
                                } else {
                                    wrong_kuang[k].setBackgroundResource(R.color.dark_color);
                                    human_icons[k].setColorFilter(Color.parseColor("#aaaaaa"));
                                }
                            }
                            for (int k = 2; k < 6; k++) {
                                if (wrong_id.get(i).get(k)) {
                                    wrong_kuang[(k - 2) * 2 + 2].setBackgroundResource(R.color.light_color);
                                    wrong_kuang[(k - 2) * 2 + 1 + 2].setBackgroundResource(R.color.light_color);
                                    human_icons[k].setColorFilter(Color.parseColor("#FF5C5C"));
                                } else {
                                    wrong_kuang[(k - 2) * 2 + 2].setBackgroundResource(R.color.dark_color);
                                    wrong_kuang[(k - 2) * 2 + 1 + 2].setBackgroundResource(R.color.dark_color);
                                    human_icons[k].setColorFilter(Color.parseColor("#aaaaaa"));
                                }
                            }
                        }
                        break;
                    } else {
                        for (int k = 0; k < 10; k++)
                            wrong_kuang[k].setBackgroundResource(R.color.dark_color);
                        if (detailPlayer.getSpeed() == 0.25f) {
                            detailPlayer.getMspeed().setText("1倍速");
                            detailPlayer.getCurrentPlayer().setSpeedPlaying(1f, true);
                        }
                    }
                }
            }
    }

    public class WrongShow extends View {

        private boolean iscon;

        public WrongShow(Context context) {
            super(context);
            iscon = false;
        }

        public void start_show(){
            iscon = true;
            postInvalidate();
        }

        public void stop_show(){
            iscon = false;
        }

        @Override
        protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        }

        @Override
        protected void onDraw(Canvas canvas) {
            if(iscon) {
                show_wrong();
                postInvalidate();
            }
        }

    }

}